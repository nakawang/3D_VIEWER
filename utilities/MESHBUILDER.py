import vtk
def delaunay3D(vtkPolyData):
    delny = vtk.vtkDelaunay3D()
    delny.SetInputData(vtkPolyData)
    delny.SetTolerance(0.01)
    delny.SetAlpha(0.2)
    delny.BoundingTriangulationOff()
    #shrink = vtk.vtkShrinkFilter()
    #shrink.SetInputConnection(delny.GetOutputPort())
    #shrink.SetShrinkFactor(0.9)
    mapper=vtk.vtkDataSetMapper()
    mapper.SetInputConnection(delny.GetOutputPort())
    triangulation=vtk.vtkActor()
    triangulation.SetMapper(mapper)
    triangulation.GetProperty().SetColor(1,0,0)
    return triangulation
def surfaceRecon(vtkPolyData):
    surf = vtk.vtkSurfaceReconstructionFilter()
    surf.SetInputData(vtkPolyData)
    print(surf)
    contour = vtk.vtkContourFilter()
    contour.SetInputConnection(surf.GetOutputPort())
    contour.SetValue(0,0.0)
    print(contour)
    reverse = vtk.vtkReverseSense()
    reverse.SetInputConnection(contour.GetOutputPort())
    reverse.ReverseCellsOn()
    reverse.ReverseNormalsOn()
    contourMapper=vtk.vtkPolyDataMapper()
    contourMapper.SetInputConnection(reverse.GetOutputPort())
    contourMapper.ScalarVisibilityOff()
    print(contourMapper)
    contourActor=vtk.vtkActor()
    contourActor.SetMapper(contourMapper)
    print(contourActor)
    return contourActor
